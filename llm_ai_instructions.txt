Node Development Reference (Condensed for LLM)

1. Node Folder Structure
Each node lives in its own folder:
meta.js â†’ identity, I/O, defaults
ui.jsx â†’ graph view box, read-only
inspector.jsx â†’ editable form for node properties
process.js â†’ runtime logic
registerFrontend.js â†’ registers UI/inspector/meta with the frontend
registerRuntime.js â†’ registers runtime handler with the backend/worker

2. meta.js
Defines node metadata and schema. Required: type, label, inputs, outputs, config, getInitialData(). Example:
export const meta = {
  label: "Formatter",
  version: "1.0.0",
  description: "Formats inputs",
  keywords: ["template","format"],
  type: "core.formatter",
  category: "Core",
  icon: "ðŸ§©",
  inputs: [{ key: "in", label: "Inputs", type: "any" }],
  outputs: [{ key: "value", label: "Value", type: ["string","object"] }],
  config: [ { key: "mode", type: "enum", options: ["json","string"], default: "json" } ],
  getInitialData: () => ({ mode: "json" }),
  isDeterministic: true,
  hasSideEffects: false
}

3. ui.jsx
Lightweight, read-only representation of a node. Shows title, labels, previews, status. Exposes React Flow handles. Example:
import { Handle, Position } from "@xyflow/react";
export default function FormatterNode({ data }) {
  return <div><Handle id="in" type="target" position={Position.Left} /><Handle id="value" type="source" position={Position.Right} /></div>
}

4. inspector.jsx
Interactive editor for node properties. Receives { node, value, onChange }. Updates node.data. Handles validation and previews.

5. process.js
Runtime execution logic. Exports run({ inputs, data, context }). Must return outputs matching meta.js.
Example:
export async function run({ inputs, data }) { return { value: data?.value ?? null } }

6. registerFrontend.js
Registers node with the frontend. Safe to import JSX. Example:
import { meta } from "./meta.js"; import UI from "./ui.jsx"; import Inspector from "./inspector.jsx";
export function registerFrontend({ nodeTypes, inspectorRegistry, nodePalette, metaRegistry }) {
  nodeTypes[meta.type] = UI;
  inspectorRegistry[meta.type] = Inspector;
  nodePalette.push({ type: meta.type, label: meta.label, getData: meta.getInitialData });
  if (metaRegistry) metaRegistry.set(meta.type, meta);
}

7. registerRuntime.js
Registers node with the backend/worker. Does not import JSX. Example:
import { run } from "./process.js"; import { meta } from "./meta.js";
export function registerRuntime({ handlers }) { handlers.set(meta.type, { run }) }

8. App â†” Node Data Flow
Graph stores nodes/edges. Inspector edits .data. NodeInspector wires inspector. FlowCanvas recomputes node.data.availableParams on edges change. Example: connecting Constant updates Formatter.availableParams.

9. Styling Guidelines
Borders: 1px solid #cbd5e1, Shadows: light, Fonts: system-ui + monospace, Pills: border 1px solid #e2e8f0, background #f8fafc

10. Templates
meta.js, ui.jsx, inspector.jsx, process.js, registerFrontend.js, registerRuntime.js provided as boilerplate.
